export declare type Identifier = string;
export declare const IsIdentifier: (ast: AST) => ast is string;
export declare type IdentifierList = Identifier[];
export declare const IsIdentifierList: (ast: AST) => ast is string[];
export declare type Procedure = (arg: AST) => AST;
export declare const IsProcedure: (ast: AST) => ast is Procedure;
export declare type Atom = Identifier | Procedure;
export declare const IsAtom: (ast: AST) => ast is Atom;
export declare type List = AST[];
export declare const IsList: (ast: AST) => ast is List;
export declare type AST = Atom | List;
export declare const LAMBDA_IDENTIFIER: "lambda";
export declare type LambdaArguments = [Identifier];
export declare const IsLambdaArguments: (ast: AST) => ast is LambdaArguments;
export declare type LambdaForm = [typeof LAMBDA_IDENTIFIER, LambdaArguments, AST];
export declare const IsLambdaForm: (ast: AST) => ast is LambdaForm;
export declare type ApplyForm = [AST, AST];
export declare const IsApplyForm: (ast: AST) => ast is ApplyForm;
export declare type ProcedureForm = [Procedure, AST];
export declare const IsProcedureForm: (ast: AST) => ast is ProcedureForm;
//# sourceMappingURL=ast.d.ts.map